cmake_minimum_required(VERSION 2.8)

#gatherSources(<sourceListVariable> [QUIET] <directory0> [<directory1> [<directory2> [ ... [<directoryN>]] ])   
# additionally creates a list <sourceListVariable>_HEADER containing all collected header files
function(gatherSources sourceList)
    set(directory "")
    set(directoryList ${ARGN})
    #message("ARGN: ${ARGN}")
    #message("directoryList:${directoryList}")
    list(GET directoryList 0 quietArgument)
    #message("quietArgument:${quietArgument}")
    if(quietArgument MATCHES ".*QUIET.*")
        #message("quiet is ON")
        set(QUIET ON)
        list(REMOVE_AT directoryList 0 )
    else()
        #message("quiet is OFF")
        set(QUIET OFF)
    endif()
    #message(STATUS "QUIET: ${QUIET}")
    if(NOT QUIET)
        message(STATUS "Gathering Sources into ${sourceList} from ${ARGN}")
    endif()
    foreach(dir ${directoryList})
        set(directory "${CMAKE_CURRENT_LIST_DIR}/${dir}")
        set(fileList "${directory}/fileList.txt")
        if(NOT EXISTS ${fileList})
            message(FATAL_ERROR "Unable to find fileList.txt in directory ${directory}")
        elseif(EXISTS ${fileList})
            if(NOT QUIET)
                message(STATUS "   >${dir}")
            endif()
            #include_directories(${directory})
            set(FILE_LIST "")
            set(SUBDIRECTORIES "")
            include(${fileList})
            set(fCount 0)
            foreach(theFile ${FILE_LIST})
                if(NOT EXISTS "${directory}/${theFile}")
                    message(WARNING "${theFile} was not found in directory ${directory}")
                else()
                    if(NOT QUIET)
                        message(STATUS "    + ${theFile}")
                    endif()
                    list(APPEND ${sourceList} "${directory}/${theFile}")
                    string(REGEX MATCH "^.*\\.(h|hpp)$" isHeaderFile ${theFile})
                    #message(STATUS "isHeaderFile=${isHeaderFile}")
                    if(NOT isHeaderFile STREQUAL "")      
                        list(APPEND "${sourceList}_HEADERS" "${directory}/${theFile}")
                        #message(STATUS "${sourceList}_HEADERS=${${sourceList}_HEADERS}")
                    endif()
                    math(EXPR fCount "${fCount}+1")
                endif()
            endforeach()
            if(NOT QUIET)
                if(fCount EQUAL 1)
                    message(STATUS "    ... Added ${fCount} file")
                else()
                    message(STATUS "    ... Added ${fCount} files")
                endif()
            endif()
            list(LENGTH SUBDIRECTORIES subdir_size)
            if(subdir_size GREATER 0)
                set(${sourceList}_BACKUP ${${sourceList}})
                set(${sourceList}_HEADERS_BACKUP ${${sourceList}_HEADERS})
                set(extSubdirs "")
                foreach(subdir ${SUBDIRECTORIES})
                    #message("subdir=${subdir}")
                    set(extSubdirs ${extSubdirs} "${dir}/${subdir}")
                endforeach()
                set(subsources "")
                if(QUIET)
                  gatherSources(subsources "QUIET" ${extSubdirs})
                else()
                  gatherSources(subsources ${extSubdirs})
                endif()
                #message(STATUS ">subsources: subsources=${subsources}")
                set(${sourceList} ${${sourceList}_BACKUP} ${subsources})
                #message(STATUS "subsources_HEADER=${subsources_HEADER}")
                set("${sourceList}_HEADERS" ${${sourceList}_HEADERS_BACKUP} ${subsources_HEADERS})
            endif()
            #message(STATUS ">sourceList: ${sourceList}=${${sourceList}}")
        endif()
    endforeach()
    set(${sourceList} ${${sourceList}} PARENT_SCOPE)
    set("${sourceList}_HEADERS" ${${sourceList}_HEADERS} PARENT_SCOPE)
endfunction(gatherSources)

#getSubdirectories(<output variable> <base folder>)
function(getSubdirectories result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
        LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist} PARENT_SCOPE)
endfunction()
